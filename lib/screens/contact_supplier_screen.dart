import 'package:flutter/material.dart';
import 'chat_screen.dart';

class ContactSupplierScreen extends StatefulWidget {
  final List<Map<String, dynamic>> orderedItems;

  const ContactSupplierScreen({super.key, required this.orderedItems});

  @override
  State<ContactSupplierScreen> createState() => _ContactSupplierScreenState();
}

class _ContactSupplierScreenState extends State<ContactSupplierScreen> {
  bool isNepali = true; // üåê Language toggle

  String getText({required String en, required String ne}) {
    return isNepali ? ne : en;
  }

  @override
  Widget build(BuildContext context) {
    const supplierName = '‡§∞‡§æ‡§Æ‡•Å ‡§ï‡§ø‡§∏‡§æ‡§®';
    const supplierPhone = '‡•Ø‡•Æ‡•™‡•ß‡•®‡•©‡•™‡•´‡•¨‡•≠‡•Æ';
    const buyerName = '‡§ñ‡§∞‡§ø‡§¶‡§ï‡§∞‡•ç‡§§‡§æ'; // Replace with dynamic if needed

    return Scaffold(
      appBar: AppBar(
        title: Text(
          getText(en: 'Contact Supplier', ne: '‡§Ü‡§™‡•Ç‡§∞‡•ç‡§§‡§ø‡§ï‡§∞‡•ç‡§§‡§æ‡§∏‡§Å‡§ó ‡§∏‡§Æ‡•ç‡§™‡§∞‡•ç‡§ï ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç'),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.language),
            onPressed: () {
              setState(() {
                isNepali = !isNepali;
              });
            },
            tooltip: getText(en: 'Language', ne: '‡§≠‡§æ‡§∑‡§æ'),
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              getText(
                en: 'Ordered Items:',
                ne: '‡§Ö‡§∞‡•ç‡§°‡§∞ ‡§ó‡§∞‡§ø‡§è‡§ï‡§æ ‡§¨‡§æ‡§≤‡•Ä‡§π‡§∞‡•Ç:',
              ),
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            Expanded(
              child: ListView.builder(
                itemCount: widget.orderedItems.length,
                itemBuilder: (context, index) {
                  final item = widget.orderedItems[index];
                  return ListTile(
                    leading: const Icon(Icons.shopping_bag, color: Colors.green),
                    title: Text(item['name']),
                    subtitle: Text(
                      '${getText(en: 'Quantity', ne: '‡§™‡§∞‡§ø‡§Æ‡§æ‡§£')}: ${item['quantity']} kg',
                    ),
                  );
                },
              ),
            ),
            const Divider(),
            Text(
              '${getText(en: 'Supplier', ne: '‡§Ü‡§™‡•Ç‡§∞‡•ç‡§§‡§ø‡§ï‡§∞‡•ç‡§§‡§æ')}: $supplierName\n'
              '${getText(en: 'Phone', ne: '‡§´‡•ã‡§®')}: $supplierPhone',
              style: const TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 15),
            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(
                            getText(
                              en: 'Calling feature coming soon!',
                              ne: '‡§∏‡§Æ‡•ç‡§™‡§∞‡•ç‡§ï ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ ‡§ö‡§æ‡§Å‡§°‡•à ‡§Ü‡§â‡§Å‡§¶‡•à‡§õ!',
                            ),
                          ),
                        ),
                      );
                    },
                    icon: const Icon(Icons.call),
                    label: Text(
                      getText(en: 'Call', ne: '‡§´‡•ã‡§® ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç'),
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const ChatScreen(
                            buyerName: buyerName,
                            sellerName: supplierName,
                          ),
                        ),
                      );
                    },
                    icon: const Icon(Icons.chat),
                    label: Text(
                      getText(en: 'Chat', ne: '‡§ö‡•ç‡§Ø‡§æ‡§ü ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç'),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
