import 'package:flutter/material.dart';

class SmartCropRecommendationScreen extends StatefulWidget {
  const SmartCropRecommendationScreen({super.key});

  @override
  State<SmartCropRecommendationScreen> createState() =>
      _SmartCropRecommendationScreenState();
}

class _SmartCropRecommendationScreenState
    extends State<SmartCropRecommendationScreen> {
  String? selectedSoilType;
  String? selectedWaterLevel;
  String? selectedRegion;

  String soilBasedCrop = '';
  String waterBasedCrop = '';
  String regionBasedCrop = '';

  final List<String> soilTypes = [
    '‡§≤‡•ã‡§Æ',
    '‡§ï‡§æ‡§≤‡•ã',
    '‡§ö‡§ø‡§ï‡§®',
    '‡§∞‡•á‡§§‡•Ä‡§≤‡•ã',
    '‡§™‡§æ‡§®‡•Ä‡§≤‡•ã',
    '‡§¨‡§æ‡§≤‡•Å',
  ];

  final List<String> waterLevels = ['‡§ß‡•á‡§∞‡•à', '‡§Æ‡§ß‡•ç‡§Ø‡§Æ', '‡§ï‡§Æ'];

  final List<String> regions = ['‡§§‡§∞‡§æ‡§à', '‡§™‡§π‡§æ‡§°', '‡§π‡§ø‡§Æ‡§æ‡§≤'];

  void generateRecommendations() {
    // Soil-based crop
    if (selectedSoilType == '‡§≤‡•ã‡§Æ') {
      soilBasedCrop = '‡§ß‡§æ‡§®';
    } else if (selectedSoilType == '‡§ï‡§æ‡§≤‡•ã') {
      soilBasedCrop = '‡§Ü‡§≤‡•Å';
    } else if (selectedSoilType == '‡§ö‡§ø‡§ï‡§®') {
      soilBasedCrop = '‡§ö‡§®‡§æ';
    } else if (selectedSoilType == '‡§∞‡•á‡§§‡•Ä‡§≤‡•ã') {
      soilBasedCrop = '‡§ï‡§æ‡§ó‡§§‡•Ä';
    } else if (selectedSoilType == '‡§™‡§æ‡§®‡•Ä‡§≤‡•ã') {
      soilBasedCrop = '‡§ï‡§æ‡§Å‡§ï‡•ç‡§∞‡•ã';
    } else if (selectedSoilType == '‡§¨‡§æ‡§≤‡•Å') {
      soilBasedCrop = '‡§ó‡§π‡•Å‡§Å';
    }

    // Water-based crop
    if (selectedWaterLevel == '‡§ß‡•á‡§∞‡•à') {
      waterBasedCrop = '‡§ß‡§æ‡§®';
    } else if (selectedWaterLevel == '‡§Æ‡§ß‡•ç‡§Ø‡§Æ') {
      waterBasedCrop = '‡§ï‡§æ‡§â‡§≤‡•Ä';
    } else if (selectedWaterLevel == '‡§ï‡§Æ') {
      waterBasedCrop = '‡§Æ‡§∏‡•Å‡§∞‡•ã';
    }

    // Region-based crop
    if (selectedRegion == '‡§§‡§∞‡§æ‡§à') {
      regionBasedCrop = '‡§ó‡§®‡•ç‡§®‡§æ';
    } else if (selectedRegion == '‡§™‡§π‡§æ‡§°') {
      regionBasedCrop = '‡§ï‡•ã‡§¶‡•ã';
    } else if (selectedRegion == '‡§π‡§ø‡§Æ‡§æ‡§≤') {
      regionBasedCrop = '‡§∏‡•ç‡§Ø‡§æ‡§â';
    }

    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('üîç ‡§¨‡§æ‡§≤‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∏ ‡§∏‡•Å‡§ù‡§æ‡§µ'),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          children: [
            const Text(
              'üß± ‡§ï‡•Å‡§® ‡§Æ‡§æ‡§ü‡•ã‡§Æ‡§æ ‡§ï‡•Å‡§® ‡§¨‡§æ‡§≤‡•Ä?',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            DropdownButtonFormField<String>(
              value: selectedSoilType,
              hint: const Text('‡§Æ‡§æ‡§ü‡•ã‡§ï‡•ã ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç'),
              items: soilTypes
                  .map(
                    (soil) => DropdownMenuItem(value: soil, child: Text(soil)),
                  )
                  .toList(),
              onChanged: (value) {
                setState(() => selectedSoilType = value);
              },
            ),
            const SizedBox(height: 20),
            const Text(
              'üíß ‡§™‡§æ‡§®‡•Ä ‡§ï‡§§‡§ø ‡§õ ‡§≠‡§®‡•á ‡§ï‡•Å‡§® ‡§¨‡§æ‡§≤‡•Ä?',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            DropdownButtonFormField<String>(
              value: selectedWaterLevel,
              hint: const Text('‡§™‡§æ‡§®‡•Ä‡§ï‡•ã ‡§Æ‡§æ‡§§‡•ç‡§∞‡§æ ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç'),
              items: waterLevels
                  .map(
                    (level) =>
                        DropdownMenuItem(value: level, child: Text(level)),
                  )
                  .toList(),
              onChanged: (value) {
                setState(() => selectedWaterLevel = value);
              },
            ),
            const SizedBox(height: 20),
            const Text(
              'üèîÔ∏è ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ï‡•Å‡§® ‡§¨‡§æ‡§≤‡•Ä?',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            DropdownButtonFormField<String>(
              value: selectedRegion,
              hint: const Text('‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç'),
              items: regions
                  .map(
                    (region) =>
                        DropdownMenuItem(value: region, child: Text(region)),
                  )
                  .toList(),
              onChanged: (value) {
                setState(() => selectedRegion = value);
              },
            ),
            const SizedBox(height: 30),
            ElevatedButton(
              onPressed: () {
                if (selectedSoilType != null &&
                    selectedWaterLevel != null &&
                    selectedRegion != null) {
                  generateRecommendations();
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§¨‡•à ‡§µ‡§ø‡§ï‡§≤‡•ç‡§™‡§π‡§∞‡•Ç ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç'),
                    ),
                  );
                }
              },
              child: const Text('‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∏ ‡§π‡•á‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç'),
            ),
            const SizedBox(height: 30),
            if (soilBasedCrop.isNotEmpty ||
                waterBasedCrop.isNotEmpty ||
                regionBasedCrop.isNotEmpty)
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  if (soilBasedCrop.isNotEmpty)
                    Text(
                      'üß± ‡§Æ‡§æ‡§ü‡•ã‡§ï‡•ã ‡§Ü‡§ß‡§æ‡§∞‡§Æ‡§æ: $soilBasedCrop',
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  if (waterBasedCrop.isNotEmpty)
                    Text(
                      'üíß ‡§™‡§æ‡§®‡•Ä‡§ï‡•ã ‡§Ü‡§ß‡§æ‡§∞‡§Æ‡§æ: $waterBasedCrop',
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  if (regionBasedCrop.isNotEmpty)
                    Text(
                      'üèîÔ∏è ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§ï‡•ã ‡§Ü‡§ß‡§æ‡§∞‡§Æ‡§æ: $regionBasedCrop',
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                ],
              ),
          ],
        ),
      ),
    );
  }
}
